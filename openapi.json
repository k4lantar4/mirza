{
  "openapi": "3.1.0",
  "info": {
    "title": "PasarGuardAPI",
    "description": "Unified GUI Censorship Resistant Solution",
    "version": "1.3.1"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Base",
        "operationId": "base",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "text/html": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/manifest.json": {
      "get": {
        "summary": "Get Manifest",
        "description": "Dynamic PWA manifest generator",
        "operationId": "get_manifest",
        "parameters": [
          {
            "name": "start_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Start Url"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/admin/token": {
      "post": {
        "tags": ["Admin"],
        "summary": "Admin Token",
        "description": "Authenticate an admin and issue a token.",
        "operationId": "admin_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_admin_token_api_admin_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/admin/miniapp/token": {
      "post": {
        "tags": ["Admin"],
        "summary": "Admin Mini App Token",
        "description": "Authenticate an admin and issue a token.",
        "operationId": "admin_mini_app_token",
        "parameters": [
          {
            "name": "x-telegram-authorization",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "title": "X-Telegram-Authorization" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/admin": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get Current Admin",
        "description": "Retrieve the current authenticated admin.",
        "operationId": "get_current_admin",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AdminDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      },
      "post": {
        "tags": ["Admin"],
        "summary": "Create Admin",
        "description": "Create a new admin if the current admin has sudo privileges.",
        "operationId": "create_admin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AdminCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Admin created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AdminDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "409": {
            "description": "Conflict Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conflict" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/admin/{username}": {
      "put": {
        "tags": ["Admin"],
        "summary": "Modify Admin",
        "description": "Modify an existing admin's details.",
        "operationId": "modify_admin",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AdminModify" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AdminDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Admin"],
        "summary": "Remove Admin",
        "description": "Remove an admin from the database.",
        "operationId": "remove_admin",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/admins": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get Admins",
        "description": "Fetch a list of admins with optional filters for pagination and username.",
        "operationId": "get_admins",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Username"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Limit"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Sort"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AdminDetails" },
                  "title": "Response Get Admins Api Admins Get"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/admin/{username}/users/disable": {
      "post": {
        "tags": ["Admin"],
        "summary": "Disable All Active Users",
        "description": "Disable all active users under a specific admin",
        "operationId": "disable_all_active_users",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/admin/{username}/users/activate": {
      "post": {
        "tags": ["Admin"],
        "summary": "Activate All Disabled Users",
        "description": "Activate all disabled users under a specific admin",
        "operationId": "activate_all_disabled_users",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/admin/{username}/reset": {
      "post": {
        "tags": ["Admin"],
        "summary": "Reset Admin Usage",
        "description": "Resets usage of admin.",
        "operationId": "reset_admin_usage",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AdminDetails" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/system": {
      "get": {
        "tags": ["System"],
        "summary": "Get System Stats",
        "description": "Fetch system stats including memory, CPU, and user metrics.",
        "operationId": "get_system_stats",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "admin_username",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Admin Username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SystemStats" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/inbounds": {
      "get": {
        "tags": ["System"],
        "summary": "Get Inbounds",
        "description": "Retrieve inbound configurations grouped by protocol.",
        "operationId": "get_inbounds",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "type": "string" },
                  "type": "array",
                  "title": "Response Get Inbounds Api Inbounds Get"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/settings": {
      "get": {
        "tags": ["Settings"],
        "summary": "Get Settings",
        "operationId": "get_settings",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsSchema-Output"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      },
      "put": {
        "tags": ["Settings"],
        "summary": "Modify Settings",
        "operationId": "modify_settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SettingsSchema-Input" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsSchema-Output"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/settings/general": {
      "get": {
        "tags": ["Settings"],
        "summary": "Get General Settings",
        "operationId": "get_general_settings",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/General" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/group": {
      "post": {
        "tags": ["Groups"],
        "summary": "Create a new group",
        "description": "Creates a new group in the system. Only sudo administrators can create groups.",
        "operationId": "create_group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GroupCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GroupResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/groups": {
      "get": {
        "tags": ["Groups"],
        "summary": "List all groups",
        "description": "Retrieves a paginated list of all groups in the system. Requires admin authentication.",
        "operationId": "get_all_groups",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "title": "Offset" }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "title": "Limit" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GroupsResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/group/{group_id}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get group details",
        "description": "Retrieves detailed information about a specific group by its ID.",
        "operationId": "get_group",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Group Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GroupResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Groups"],
        "summary": "Modify group",
        "description": "Updates an existing group's information. Only sudo administrators can modify groups.",
        "operationId": "modify_group",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Group Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GroupModify" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GroupResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Groups"],
        "summary": "Remove group",
        "description": "Deletes a group from the system. Only sudo administrators can delete groups.",
        "operationId": "remove_group",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Group Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/groups/bulk/add": {
      "post": {
        "tags": ["Groups"],
        "summary": "Bulk add groups to users",
        "description": "Bulk assign groups to multiple users, users under specific admins, or all users.\n\n- **group_ids**: List of group IDs to add (required)\n- **users**: Optional list of user IDs to assign the groups to\n- **admins**: Optional list of admin IDs — their users will be targeted\n\nNotes:\n- If neither 'users' nor 'admins' are provided, groups will be added to *all users*\n- Existing user-group associations will be ignored (no duplication)\n- Returns list of affected users (those who received new group associations)",
        "operationId": "bulk_add_groups_to_users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BulkGroup" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success confirmation",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/groups/bulk/remove": {
      "post": {
        "tags": ["Groups"],
        "summary": "Bulk remove groups from users",
        "description": "Bulk remove groups from multiple users, users under specific admins, or all users.\n\n- **group_ids**: List of group IDs to remove (required)\n- **users**: Optional list of user IDs to remove the groups from\n- **admins**: Optional list of admin IDs — their users will be targeted\n\nNotes:\n- If neither 'users' nor 'admins' are provided, groups will be removed from *all users*\n- Only existing user-group associations will be removed\n- Returns list of affected users (those who had groups removed)",
        "operationId": "bulk_remove_users_from_groups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BulkGroup" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success confirmation",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/core": {
      "post": {
        "tags": ["Core"],
        "summary": "Create Core Config",
        "description": "Create a new core configuration.",
        "operationId": "create_core_config",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CoreCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CoreResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/core/{core_id}": {
      "get": {
        "tags": ["Core"],
        "summary": "Get Core Config",
        "description": "Get a core configuration by its ID.",
        "operationId": "get_core_config",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "core_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Core Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CoreResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Core"],
        "summary": "Modify Core Config",
        "description": "Update an existing core configuration.",
        "operationId": "modify_core_config",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "core_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Core Id" }
          },
          {
            "name": "restart_nodes",
            "in": "query",
            "required": true,
            "schema": { "type": "boolean", "title": "Restart Nodes" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CoreCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CoreResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Core"],
        "summary": "Delete Core Config",
        "description": "Delete a core configuration.",
        "operationId": "delete_core_config",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "core_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Core Id" }
          },
          {
            "name": "restart_nodes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Restart Nodes"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/cores": {
      "get": {
        "tags": ["Core"],
        "summary": "Get All Cores",
        "description": "Get a list of all core configurations.",
        "operationId": "get_all_cores",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CoreResponseList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/core/{core_id}/restart": {
      "post": {
        "tags": ["Core"],
        "summary": "Restart Core",
        "description": "restart nodes related to the core config",
        "operationId": "restart_core",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "core_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Core Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/host/{host_id}": {
      "get": {
        "tags": ["Host"],
        "summary": "Get Host",
        "description": "get host by **id**",
        "operationId": "get_host",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "host_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Host Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BaseHost" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Host"],
        "summary": "Modify Host",
        "description": "modify host by **id**\n\n**inbound_tag** must be available in one of xray configs",
        "operationId": "modify_host",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "host_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Host Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateHost" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BaseHost" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Host"],
        "summary": "Remove Host",
        "description": "remove host by **id**",
        "operationId": "remove_host",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "host_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Host Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/hosts": {
      "get": {
        "tags": ["Host"],
        "summary": "Get Hosts",
        "description": "Get proxy hosts.",
        "operationId": "get_hosts",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 0, "title": "Offset" }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 0, "title": "Limit" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BaseHost" },
                  "title": "Response Get Hosts Api Hosts Get"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Host"],
        "summary": "Modify Hosts",
        "description": "Modify proxy hosts and update the configuration.",
        "operationId": "modify_hosts",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/CreateHost" },
                "title": "Modified Hosts"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/BaseHost" },
                  "title": "Response Modify Hosts Api Hosts Put"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/host/": {
      "post": {
        "tags": ["Host"],
        "summary": "Create Host",
        "description": "create a new host\n\n**inbound_tag** must be available in one of xray config",
        "operationId": "create_host",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateHost" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BaseHost" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/node/settings": {
      "get": {
        "tags": ["Node"],
        "summary": "Get Node Settings",
        "description": "Retrieve the current node settings.",
        "operationId": "get_node_settings",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NodeSettings" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/node/usage": {
      "get": {
        "tags": ["Node"],
        "summary": "Get Usage",
        "description": "Retrieve usage statistics for nodes within a specified date range.",
        "operationId": "get_usage",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "Start"
            },
            "example": "2024-01-01T00:00:00+03:30"
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "End"
            },
            "example": "2024-01-31T23:59:59+03:30"
          },
          {
            "name": "period",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Period",
              "default": "hour"
            }
          },
          {
            "name": "node_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Node Id"
            }
          },
          {
            "name": "group_by_node",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Group By Node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NodeUsageStatsList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/nodes": {
      "get": {
        "tags": ["Node"],
        "summary": "Get Nodes",
        "description": "Retrieve a list of all nodes. Accessible only to sudo admins.",
        "operationId": "get_nodes",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "backend_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Backend Id"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "title": "Offset" }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "title": "Limit" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/NodeResponse" },
                  "title": "Response Get Nodes Api Nodes Get"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/nodes/reconnect": {
      "post": {
        "tags": ["Node"],
        "summary": "Reconnect All Node",
        "description": "Trigger reconnection for all nodes or a specific core.",
        "operationId": "reconnect_all_node",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "core_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Core Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/node": {
      "post": {
        "tags": ["Node"],
        "summary": "Create Node",
        "description": "Create a new node to the database.",
        "operationId": "create_node",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NodeCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NodeResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "409": {
            "description": "Conflict Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conflict" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/node/{node_id}": {
      "get": {
        "tags": ["Node"],
        "summary": "Get Node",
        "description": "Retrieve details of a specific node by its ID.",
        "operationId": "get_node",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Node Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NodeResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Node"],
        "summary": "Modify Node",
        "description": "Modify a node's details. Only accessible to sudo admins.",
        "operationId": "modify_node",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Node Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NodeModify" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NodeResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Node"],
        "summary": "Remove Node",
        "description": "Remove a node and remove it from xray in the background.",
        "operationId": "remove_node",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Node Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/node/{node_id}/reconnect": {
      "post": {
        "tags": ["Node"],
        "summary": "Reconnect Node",
        "description": "Trigger a reconnection for the specified node. Only accessible to sudo admins.",
        "operationId": "reconnect_node",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Node Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/node/{node_id}/sync": {
      "put": {
        "tags": ["Node"],
        "summary": "Sync Node",
        "operationId": "sync_node",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Node Id" }
          },
          {
            "name": "flush_users",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Flush Users"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/node/{node_id}/logs": {
      "get": {
        "tags": ["Node"],
        "summary": "Node Logs",
        "description": "Stream logs for a specific node as Server-Sent Events.",
        "operationId": "node_logs",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Node Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/node/{node_id}/stats": {
      "get": {
        "tags": ["Node"],
        "summary": "Get Node Stats Periodic",
        "operationId": "get_node_stats_periodic",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Node Id" }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "Start"
            },
            "example": "2024-01-01T00:00:00+03:30"
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "End"
            },
            "example": "2024-01-31T23:59:59+03:30"
          },
          {
            "name": "period",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Period",
              "default": "hour"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NodeStatsList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/node/{node_id}/realtime_stats": {
      "get": {
        "tags": ["Node"],
        "summary": "Realtime Node Stats",
        "description": "Retrieve node real-time statistics.",
        "operationId": "realtime_node_stats",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Node Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NodeRealtimeStats" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/nodes/realtime_stats": {
      "get": {
        "tags": ["Node"],
        "summary": "Realtime Nodes Stats",
        "description": "Retrieve nodes real-time statistics.",
        "operationId": "realtime_nodes_stats",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "anyOf": [
                      { "$ref": "#/components/schemas/NodeRealtimeStats" },
                      { "type": "null" }
                    ]
                  },
                  "type": "object",
                  "title": "Response Realtime Nodes Stats Api Nodes Realtime Stats Get"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/node/{node_id}/online_stats/{username}": {
      "get": {
        "tags": ["Node"],
        "summary": "User Online Stats",
        "description": "Retrieve user online stats by node.",
        "operationId": "user_online_stats",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Node Id" }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { "type": "integer" },
                  "title": "Response User Online Stats Api Node  Node Id  Online Stats  Username  Get"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/node/{node_id}/online_stats/{username}/ip": {
      "get": {
        "tags": ["Node"],
        "summary": "User Online Ip List",
        "description": "Retrieve user ips by node.",
        "operationId": "user_online_ip_list",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Node Id" }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": { "type": "integer" }
                  },
                  "title": "Response User Online Ip List Api Node  Node Id  Online Stats  Username  Ip Get"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/nodes/clear_usage_data/{table}": {
      "delete": {
        "tags": ["Node"],
        "summary": "Clear usage data from a specified table",
        "description": "Deletes **all rows** from the selected usage data table. Use with caution.\n\nAllowed tables:\n    - `node_user_usages`: Deletes user-specific node usage traffic records.\n    - `node_usages`: Deletes node-level aggregated traffic (uplink/downlink) records.\n\n**Optional filters:**\n    - `start`: ISO 8601 timestamp to filter from (inclusive)\n    - `end`: ISO 8601 timestamp to filter to (exclusive)\n\n⚠️ This operation is irreversible. Ensure correct usage in production environments.",
        "operationId": "clear_usage_data",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "required": true,
            "schema": { "$ref": "#/components/schemas/UsageTable" }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "Start"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "End"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/user": {
      "post": {
        "tags": ["User"],
        "summary": "Create User",
        "description": "Create a new user\n\n- **username**: 3 to 32 characters, can include a-z, 0-9, and underscores.\n- **status**: User's status, defaults to `active`. Special rules if `on_hold`.\n- **expire**: UTC datetime for account expiration. Use `0` for unlimited.\n- **data_limit**: Max data usage in bytes (e.g., `1073741824` for 1GB). `0` means unlimited.\n- **data_limit_reset_strategy**: Defines how/if data limit resets. `no_reset` means it never resets.\n- **proxy_settings**: Dictionary of protocol settings (e.g., `vmess`, `vless`) will generate data for all protocol by default.\n- **group_ids**: List of group IDs to assign to the user.\n- **note**: Optional text field for additional user information or notes.\n- **on_hold_timeout**: UTC timestamp when `on_hold` status should start or end.\n- **on_hold_expire_duration**: Duration (in seconds) for how long the user should stay in `on_hold` status.\n- **next_plan**: Next user plan (resets after use).",
        "operationId": "create_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "400": {
            "description": "BadRequest Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPException" }
              }
            }
          },
          "409": {
            "description": "Conflict Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conflict" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/user/{username}": {
      "put": {
        "tags": ["User"],
        "summary": "Modify User",
        "description": "Modify an existing user\n\n- **username**: Cannot be changed. Used to identify the user.\n- **status**: User's new status. Can be 'active', 'disabled', 'on_hold', 'limited', or 'expired'.\n- **expire**: UTC datetime for new account expiration. Set to `0` for unlimited, `null` for no change.\n- **data_limit**: New max data usage in bytes (e.g., `1073741824` for 1GB). Set to `0` for unlimited, `null` for no change.\n- **data_limit_reset_strategy**: New strategy for data limit reset. Options include 'daily', 'weekly', 'monthly', or 'no_reset'.\n- **proxies**: Dictionary of new protocol settings (e.g., `vmess`, `vless`). Empty dictionary means no change.\n- **group_ids**: List of new group IDs to assign to the user. Empty list means no change.\n- **note**: New optional text for additional user information or notes. `null` means no change.\n- **on_hold_timeout**: New UTC timestamp for when `on_hold` status should start or end. Only applicable if status is changed to 'on_hold'.\n- **on_hold_expire_duration**: New duration (in seconds) for how long the user should stay in `on_hold` status. Only applicable if status is changed to 'on_hold'.\n- **next_plan**: Next user plan (resets after use).\n\nNote: Fields set to `null` or omitted will not be modified.",
        "operationId": "modify_user",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserModify" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "400": {
            "description": "BadRequest Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPException" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Remove User",
        "description": "Remove a user",
        "operationId": "remove_user",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["User"],
        "summary": "Get User",
        "description": "Get user information",
        "operationId": "get_user",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/user/{username}/reset": {
      "post": {
        "tags": ["User"],
        "summary": "Reset User Data Usage",
        "description": "Reset user data usage",
        "operationId": "reset_user_data_usage",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/user/{username}/revoke_sub": {
      "post": {
        "tags": ["User"],
        "summary": "Revoke User Subscription",
        "description": "Revoke users subscription (Subscription link and proxies)",
        "operationId": "revoke_user_subscription",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/users/reset": {
      "post": {
        "tags": ["User"],
        "summary": "Reset Users Data Usage",
        "description": "Reset all users data usage",
        "operationId": "reset_users_data_usage",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/users/sub_update/chart": {
      "get": {
        "tags": ["User"],
        "summary": "Get Users Sub Update Chart",
        "description": "Get subscription agent distribution percentages (optionally filtered by username)",
        "operationId": "get_users_sub_update_chart",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Username"
            }
          },
          {
            "name": "admin_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Admin Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscriptionUpdateChart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/user/{username}/set_owner": {
      "put": {
        "tags": ["User"],
        "summary": "Set Owner",
        "description": "Set a new owner (admin) for a user.",
        "operationId": "set_owner",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          },
          {
            "name": "admin_username",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Admin Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/user/{username}/active_next": {
      "post": {
        "tags": ["User"],
        "summary": "Active Next Plan",
        "description": "Reset user by next plan",
        "operationId": "active_next_plan",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/user/{username}/sub_update": {
      "get": {
        "tags": ["User"],
        "summary": "Get User Sub Update List",
        "description": "Get user subscription agent list",
        "operationId": "get_user_sub_update_list",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 0, "title": "Offset" }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 10, "title": "Limit" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscriptionUpdateList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": ["User"],
        "summary": "Get Users",
        "description": "Get all users",
        "operationId": "get_users",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "title": "Offset" }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "title": "Limit" }
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "title": "Username"
            }
          },
          {
            "name": "admin",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "array", "items": { "type": "string" } },
                { "type": "null" }
              ],
              "title": "Admin"
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "array", "items": { "type": "integer" } },
                { "type": "null" }
              ],
              "title": "Group"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Search"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/UserStatus" },
                { "type": "null" }
              ],
              "title": "Status"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Sort"
            }
          },
          {
            "name": "proxy_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Proxy Id"
            }
          },
          {
            "name": "load_sub",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Load Sub"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UsersResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "400": {
            "description": "BadRequest Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPException" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/user/{username}/usage": {
      "get": {
        "tags": ["User"],
        "summary": "Get User Usage",
        "description": "Get users usage",
        "operationId": "get_user_usage",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          },
          {
            "name": "period",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Period" }
          },
          {
            "name": "node_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Node Id"
            }
          },
          {
            "name": "group_by_node",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Group By Node"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "Start"
            },
            "example": "2024-01-01T00:00:00+03:30"
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "End"
            },
            "example": "2024-01-31T23:59:59+03:30"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserUsageStatsList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "404": {
            "description": "NotFound Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFound" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/users/usage": {
      "get": {
        "tags": ["User"],
        "summary": "Get Users Usage",
        "description": "Get all users usage",
        "operationId": "get_users_usage",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "period",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/Period" }
          },
          {
            "name": "node_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Node Id"
            }
          },
          {
            "name": "group_by_node",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Group By Node"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "Start"
            },
            "example": "2024-01-01T00:00:00+03:30"
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "End"
            },
            "example": "2024-01-31T23:59:59+03:30"
          },
          {
            "name": "admin",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "array", "items": { "type": "string" } },
                { "type": "null" }
              ],
              "title": "Admin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserUsageStatsList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/users/expired": {
      "get": {
        "tags": ["User"],
        "summary": "Get Expired Users",
        "description": "Get users who have expired within the specified date range.\n\n- **expired_after** UTC datetime (optional)\n- **expired_before** UTC datetime (optional)\n- At least one of expired_after or expired_before must be provided for filtering\n- If both are omitted, returns all expired users",
        "operationId": "get_expired_users",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "admin_username",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Admin Username"
            }
          },
          {
            "name": "expired_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "Expired After"
            },
            "example": "2024-01-01T00:00:00+03:30"
          },
          {
            "name": "expired_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "Expired Before"
            },
            "example": "2024-01-31T23:59:59+03:30"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "string" },
                  "title": "Response Get Expired Users Api Users Expired Get"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete Expired Users",
        "description": "Delete users who have expired within the specified date range.\n\n- **expired_after** UTC datetime (optional)\n- **expired_before** UTC datetime (optional)\n- At least one of expired_after or expired_before must be provided",
        "operationId": "delete_expired_users",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "admin_username",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Admin Username"
            }
          },
          {
            "name": "expired_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "Expired After"
            },
            "example": "2024-01-01T00:00:00+03:30"
          },
          {
            "name": "expired_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "Expired Before"
            },
            "example": "2024-01-31T23:59:59+03:30"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RemoveUsersResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/user/from_template": {
      "post": {
        "tags": ["User"],
        "summary": "Create User From Template",
        "operationId": "create_user_from_template",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserFromTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/user/from_template/{username}": {
      "put": {
        "tags": ["User"],
        "summary": "Modify User With Template",
        "operationId": "modify_user_with_template",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ModifyUserByTemplate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/users/bulk/expire": {
      "post": {
        "tags": ["User"],
        "summary": "Bulk sum/sub to expire of users",
        "description": "Bulk expire users based on the provided criteria.\n\n- **amount**: amount to adjust the user's quota (in seconds, positive to increase, negative to decrease) required\n- **user_ids**: Optional list of user IDs to modify\n- **admins**: Optional list of admin IDs — their users will be targeted\n- **status**: Optional status to filter users (e.g., \"expired\", \"active\"), Empty means no filtering\n- **group_ids**: Optional list of group IDs to filter users by their group membership",
        "operationId": "bulk_modify_users_expire",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BulkUser" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success confirmation",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/users/bulk/data_limit": {
      "post": {
        "tags": ["User"],
        "summary": "Bulk sum/sub to data limit of users",
        "description": "Bulk modify users' data limit based on the provided criteria.\n\n- **amount**: amount to adjust the user's quota (positive to increase, negative to decrease) required\n- **user_ids**: Optional list of user IDs to modify\n- **admins**: Optional list of admin IDs — their users will be targeted\n- **status**: Optional status to filter users (e.g., \"expired\", \"active\"), Empty means no filtering\n- **group_ids**: Optional list of group IDs to filter users by their group membership",
        "operationId": "bulk_modify_users_datalimit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BulkUser" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success confirmation",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/users/bulk/proxy_settings": {
      "post": {
        "tags": ["User"],
        "summary": "Bulk modify users proxy settings",
        "operationId": "bulk_modify_users_proxy_settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BulkUsersProxy" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success confirmation",
            "content": { "application/json": { "schema": {} } }
          },
          "401": {
            "description": "Unauthorized Error",
            "headers": {
              "WWW-Authenticate": {
                "description": "Authentication type",
                "schema": { "type": "string" }
              }
            },
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Unauthorized" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/sub/{token}/": {
      "get": {
        "tags": ["Subscription"],
        "summary": "User Subscription",
        "description": "Provides a subscription link based on the user agent (Clash, V2Ray, etc.).",
        "operationId": "user_subscription",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Token" }
          },
          {
            "name": "user-agent",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "default": "", "title": "User-Agent" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/sub/{token}/info": {
      "get": {
        "tags": ["Subscription"],
        "summary": "User Subscription Info",
        "description": "Retrieves detailed information about the user's subscription.",
        "operationId": "user_subscription_info",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Token" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionUserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/sub/{token}/apps": {
      "get": {
        "tags": ["Subscription"],
        "summary": "User Subscription Apps",
        "description": "Get applications available for user's subscription.",
        "operationId": "user_subscription_apps",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Token" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Application-Output"
                  },
                  "title": "Response User Subscription Apps Sub  Token  Apps Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/sub/{token}/usage": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get Sub User Usage",
        "description": "Fetches the usage statistics for the user within a specified date range.",
        "operationId": "get_sub_user_usage",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Token" }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "Start"
            },
            "example": "2024-01-01T00:00:00+03:30"
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ],
              "title": "End"
            },
            "example": "2024-01-31T23:59:59+03:30"
          },
          {
            "name": "period",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Period",
              "default": "hour"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserUsageStatsList" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/sub/{token}/{client_type}": {
      "get": {
        "tags": ["Subscription"],
        "summary": "User Subscription With Client Type",
        "description": "Provides a subscription link based on the specified client type (e.g., Clash, V2Ray).",
        "operationId": "user_subscription_with_client_type",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Token" }
          },
          {
            "name": "client_type",
            "in": "path",
            "required": true,
            "schema": { "$ref": "#/components/schemas/ConfigFormat" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/user_template": {
      "post": {
        "tags": ["User Template"],
        "summary": "Create User Template",
        "description": "Create a new user template\n\n- **name** can be up to 64 characters\n- **data_limit** must be in bytes and larger or equal to 0\n- **expire_duration** must be in seconds and larger or equat to 0\n- **group_ids** list of group ids",
        "operationId": "create_user_template",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserTemplateCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTemplateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/user_template/{template_id}": {
      "get": {
        "tags": ["User Template"],
        "summary": "Get User Template",
        "description": "Get User Template information with id",
        "operationId": "get_user_template",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Template Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["User Template"],
        "summary": "Modify User Template",
        "description": "Modify User Template\n\n- **name** can be up to 64 characters\n- **data_limit** must be in bytes and larger or equal to 0\n- **expire_duration** must be in seconds and larger or equat to 0\n- **group_ids** list of group ids",
        "operationId": "modify_user_template",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Template Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserTemplateModify" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTemplateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["User Template"],
        "summary": "Remove User Template",
        "description": "Remove a User Template by its ID",
        "operationId": "remove_user_template",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Template Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Forbidden" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/user_templates": {
      "get": {
        "tags": ["User Template"],
        "summary": "Get User Templates",
        "description": "Get a list of User Templates with optional pagination",
        "operationId": "get_user_templates",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "title": "Offset" }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "title": "Limit" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTemplateResponse"
                  },
                  "title": "Response Get User Templates Api User Templates Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdminBase": {
        "properties": { "username": { "type": "string", "title": "Username" } },
        "type": "object",
        "required": ["username"],
        "title": "AdminBase",
        "description": "Minimal admin model containing only the username."
      },
      "AdminCreate": {
        "properties": {
          "password": { "type": "string", "title": "Password" },
          "is_sudo": { "type": "boolean", "title": "Is Sudo" },
          "telegram_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Telegram Id"
          },
          "discord_webhook": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Discord Webhook"
          },
          "discord_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Discord Id"
          },
          "is_disabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Disabled"
          },
          "sub_template": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sub Template"
          },
          "sub_domain": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sub Domain"
          },
          "profile_title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Profile Title"
          },
          "support_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Support Url"
          },
          "username": { "type": "string", "title": "Username" }
        },
        "type": "object",
        "required": ["password", "is_sudo", "username"],
        "title": "AdminCreate",
        "description": "Model for creating new admin accounts requiring username and password."
      },
      "AdminDetails": {
        "properties": {
          "username": { "type": "string", "title": "Username" },
          "telegram_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Telegram Id"
          },
          "discord_webhook": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Discord Webhook"
          },
          "sub_domain": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sub Domain"
          },
          "id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Id"
          },
          "is_sudo": { "type": "boolean", "title": "Is Sudo" },
          "total_users": {
            "type": "integer",
            "title": "Total Users",
            "default": 0
          },
          "used_traffic": {
            "type": "integer",
            "title": "Used Traffic",
            "default": 0
          },
          "is_disabled": {
            "type": "boolean",
            "title": "Is Disabled",
            "default": false
          },
          "discord_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Discord Id"
          },
          "sub_template": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sub Template"
          },
          "profile_title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Profile Title"
          },
          "support_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Support Url"
          },
          "lifetime_used_traffic": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Lifetime Used Traffic"
          }
        },
        "type": "object",
        "required": ["username", "is_sudo"],
        "title": "AdminDetails",
        "description": "Complete admin model with all fields for database representation and API responses."
      },
      "AdminModify": {
        "properties": {
          "password": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Password"
          },
          "is_sudo": { "type": "boolean", "title": "Is Sudo" },
          "telegram_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Telegram Id"
          },
          "discord_webhook": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Discord Webhook"
          },
          "discord_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Discord Id"
          },
          "is_disabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Disabled"
          },
          "sub_template": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sub Template"
          },
          "sub_domain": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Sub Domain"
          },
          "profile_title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Profile Title"
          },
          "support_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Support Url"
          }
        },
        "type": "object",
        "required": ["is_sudo"],
        "title": "AdminModify"
      },
      "Application-Input": {
        "properties": {
          "name": { "type": "string", "maxLength": 32, "title": "Name" },
          "icon_url": {
            "type": "string",
            "maxLength": 512,
            "title": "Icon Url",
            "default": ""
          },
          "import_url": {
            "type": "string",
            "maxLength": 256,
            "title": "Import Url",
            "default": ""
          },
          "description": {
            "additionalProperties": { "type": "string" },
            "propertyNames": { "$ref": "#/components/schemas/Language" },
            "type": "object",
            "title": "Description"
          },
          "recommended": {
            "type": "boolean",
            "title": "Recommended",
            "default": false
          },
          "platform": { "$ref": "#/components/schemas/Platform" },
          "download_links": {
            "items": { "$ref": "#/components/schemas/DownloadLink" },
            "type": "array",
            "title": "Download Links"
          }
        },
        "type": "object",
        "required": ["name", "platform", "download_links"],
        "title": "Application"
      },
      "Application-Output": {
        "properties": {
          "name": { "type": "string", "maxLength": 32, "title": "Name" },
          "icon_url": {
            "type": "string",
            "maxLength": 512,
            "title": "Icon Url",
            "default": ""
          },
          "import_url": {
            "type": "string",
            "maxLength": 256,
            "title": "Import Url",
            "default": ""
          },
          "description": {
            "additionalProperties": { "type": "string" },
            "propertyNames": { "$ref": "#/components/schemas/Language" },
            "type": "object",
            "title": "Description"
          },
          "recommended": {
            "type": "boolean",
            "title": "Recommended",
            "default": false
          },
          "platform": { "$ref": "#/components/schemas/Platform" },
          "download_links": {
            "items": { "$ref": "#/components/schemas/DownloadLink" },
            "type": "array",
            "title": "Download Links"
          }
        },
        "type": "object",
        "required": ["name", "platform", "download_links"],
        "title": "Application"
      },
      "BaseHost": {
        "properties": {
          "id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Id"
          },
          "remark": { "type": "string", "title": "Remark" },
          "address": {
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": true,
            "title": "Address"
          },
          "inbound_tag": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Inbound Tag"
          },
          "port": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Port"
          },
          "sni": {
            "anyOf": [
              {
                "items": { "type": "string" },
                "type": "array",
                "uniqueItems": true
              },
              { "type": "null" }
            ],
            "title": "Sni"
          },
          "host": {
            "anyOf": [
              {
                "items": { "type": "string" },
                "type": "array",
                "uniqueItems": true
              },
              { "type": "null" }
            ],
            "title": "Host"
          },
          "path": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Path"
          },
          "security": {
            "$ref": "#/components/schemas/ProxyHostSecurity",
            "default": "inbound_default"
          },
          "alpn": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/ProxyHostALPN" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Alpn"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/ProxyHostFingerprint",
            "default": ""
          },
          "allowinsecure": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Allowinsecure"
          },
          "is_disabled": {
            "type": "boolean",
            "title": "Is Disabled",
            "default": false
          },
          "http_headers": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Http Headers"
          },
          "transport_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/TransportSettings-Output" },
              { "type": "null" }
            ]
          },
          "mux_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/MuxSettings-Output" },
              { "type": "null" }
            ]
          },
          "fragment_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/FragmentSettings" },
              { "type": "null" }
            ]
          },
          "noise_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/NoiseSettings" },
              { "type": "null" }
            ]
          },
          "random_user_agent": {
            "type": "boolean",
            "title": "Random User Agent",
            "default": false
          },
          "use_sni_as_host": {
            "type": "boolean",
            "title": "Use Sni As Host",
            "default": false
          },
          "priority": { "type": "integer", "title": "Priority" },
          "status": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/UserStatus" },
                "type": "array",
                "uniqueItems": true
              },
              { "type": "null" }
            ],
            "title": "Status"
          },
          "ech_config_list": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Ech Config List"
          }
        },
        "type": "object",
        "required": ["remark", "priority"],
        "title": "BaseHost"
      },
      "Body_admin_token_api_admin_token_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              { "type": "string", "pattern": "^password$" },
              { "type": "null" }
            ],
            "title": "Grant Type"
          },
          "username": { "type": "string", "title": "Username" },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password"
          },
          "scope": { "type": "string", "title": "Scope", "default": "" },
          "client_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "format": "password",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": ["username", "password"],
        "title": "Body_admin_token_api_admin_token_post"
      },
      "Brutal": {
        "properties": {
          "enable": { "type": "boolean", "title": "Enable", "default": false },
          "up_mbps": { "type": "integer", "title": "Up Mbps" },
          "down_mbps": { "type": "integer", "title": "Down Mbps" }
        },
        "type": "object",
        "required": ["up_mbps", "down_mbps"],
        "title": "Brutal"
      },
      "BulkGroup": {
        "properties": {
          "group_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "uniqueItems": true,
            "title": "Group Ids"
          },
          "has_group_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "uniqueItems": true,
            "title": "Has Group Ids"
          },
          "admins": {
            "items": { "type": "integer" },
            "type": "array",
            "uniqueItems": true,
            "title": "Admins"
          },
          "users": {
            "items": { "type": "integer" },
            "type": "array",
            "uniqueItems": true,
            "title": "Users"
          }
        },
        "type": "object",
        "required": ["group_ids"],
        "title": "BulkGroup"
      },
      "BulkUser": {
        "properties": {
          "amount": { "type": "integer", "title": "Amount" },
          "group_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "uniqueItems": true,
            "title": "Group Ids"
          },
          "admins": {
            "items": { "type": "integer" },
            "type": "array",
            "uniqueItems": true,
            "title": "Admins"
          },
          "users": {
            "items": { "type": "integer" },
            "type": "array",
            "uniqueItems": true,
            "title": "Users"
          },
          "status": {
            "items": { "$ref": "#/components/schemas/UserStatus" },
            "type": "array",
            "uniqueItems": true,
            "title": "Status"
          }
        },
        "type": "object",
        "required": ["amount"],
        "title": "BulkUser"
      },
      "BulkUsersProxy": {
        "properties": {
          "flow": {
            "anyOf": [
              { "$ref": "#/components/schemas/XTLSFlows" },
              { "type": "null" }
            ]
          },
          "method": {
            "anyOf": [
              { "$ref": "#/components/schemas/ShadowsocksMethods" },
              { "type": "null" }
            ]
          },
          "group_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "uniqueItems": true,
            "title": "Group Ids"
          },
          "admins": {
            "items": { "type": "integer" },
            "type": "array",
            "uniqueItems": true,
            "title": "Admins"
          },
          "users": {
            "items": { "type": "integer" },
            "type": "array",
            "uniqueItems": true,
            "title": "Users"
          }
        },
        "type": "object",
        "title": "BulkUsersProxy"
      },
      "ClashMuxSettings": {
        "properties": {
          "enable": { "type": "boolean", "title": "Enable", "default": false },
          "protocol": {
            "$ref": "#/components/schemas/MultiplexProtocol",
            "default": "smux"
          },
          "max_connections": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Max Connections"
          },
          "max_streams": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Max Streams"
          },
          "min_streams": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Min Streams"
          },
          "padding": {
            "type": "boolean",
            "title": "Padding",
            "default": false
          },
          "brutal": {
            "anyOf": [
              { "$ref": "#/components/schemas/Brutal" },
              { "type": "null" }
            ]
          },
          "statistic": {
            "type": "boolean",
            "title": "Statistic",
            "default": false
          },
          "only_tcp": {
            "type": "boolean",
            "title": "Only Tcp",
            "default": false
          }
        },
        "type": "object",
        "title": "ClashMuxSettings"
      },
      "ConfigFormat": {
        "type": "string",
        "enum": [
          "links",
          "links_base64",
          "xray",
          "sing_box",
          "clash",
          "clash_meta",
          "outline",
          "block"
        ],
        "title": "ConfigFormat"
      },
      "Conflict": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "default": "Entity already exists"
          }
        },
        "type": "object",
        "title": "Conflict"
      },
      "CoreCreate": {
        "properties": {
          "name": {
            "anyOf": [
              { "type": "string", "maxLength": 256 },
              { "type": "null" }
            ],
            "title": "Name"
          },
          "config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Config"
          },
          "exclude_inbound_tags": {
            "anyOf": [
              { "items": {}, "type": "array", "uniqueItems": true },
              { "type": "null" }
            ],
            "title": "Exclude Inbound Tags"
          },
          "fallbacks_inbound_tags": {
            "anyOf": [
              { "items": {}, "type": "array", "uniqueItems": true },
              { "type": "null" }
            ],
            "title": "Fallbacks Inbound Tags"
          }
        },
        "type": "object",
        "required": ["config"],
        "title": "CoreCreate"
      },
      "CoreResponse": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Config"
          },
          "exclude_inbound_tags": {
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": true,
            "title": "Exclude Inbound Tags"
          },
          "fallbacks_inbound_tags": {
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": true,
            "title": "Fallbacks Inbound Tags"
          },
          "id": { "type": "integer", "title": "Id" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "config",
          "exclude_inbound_tags",
          "fallbacks_inbound_tags",
          "id",
          "created_at"
        ],
        "title": "CoreResponse"
      },
      "CoreResponseList": {
        "properties": {
          "count": { "type": "integer", "title": "Count" },
          "cores": {
            "items": { "$ref": "#/components/schemas/CoreResponse" },
            "type": "array",
            "title": "Cores",
            "default": []
          }
        },
        "type": "object",
        "required": ["count"],
        "title": "CoreResponseList"
      },
      "CreateHost": {
        "properties": {
          "id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Id"
          },
          "remark": { "type": "string", "title": "Remark" },
          "address": {
            "items": { "type": "string" },
            "type": "array",
            "uniqueItems": true,
            "title": "Address"
          },
          "inbound_tag": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Inbound Tag"
          },
          "port": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Port"
          },
          "sni": {
            "anyOf": [
              {
                "items": { "type": "string" },
                "type": "array",
                "uniqueItems": true
              },
              { "type": "null" }
            ],
            "title": "Sni"
          },
          "host": {
            "anyOf": [
              {
                "items": { "type": "string" },
                "type": "array",
                "uniqueItems": true
              },
              { "type": "null" }
            ],
            "title": "Host"
          },
          "path": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Path"
          },
          "security": {
            "$ref": "#/components/schemas/ProxyHostSecurity",
            "default": "inbound_default"
          },
          "alpn": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/ProxyHostALPN" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Alpn"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/ProxyHostFingerprint",
            "default": ""
          },
          "allowinsecure": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Allowinsecure"
          },
          "is_disabled": {
            "type": "boolean",
            "title": "Is Disabled",
            "default": false
          },
          "http_headers": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Http Headers"
          },
          "transport_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/TransportSettings-Input" },
              { "type": "null" }
            ]
          },
          "mux_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/MuxSettings-Input" },
              { "type": "null" }
            ]
          },
          "fragment_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/FragmentSettings" },
              { "type": "null" }
            ]
          },
          "noise_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/NoiseSettings" },
              { "type": "null" }
            ]
          },
          "random_user_agent": {
            "type": "boolean",
            "title": "Random User Agent",
            "default": false
          },
          "use_sni_as_host": {
            "type": "boolean",
            "title": "Use Sni As Host",
            "default": false
          },
          "priority": { "type": "integer", "title": "Priority" },
          "status": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/UserStatus" },
                "type": "array",
                "uniqueItems": true
              },
              { "type": "null" }
            ],
            "title": "Status"
          },
          "ech_config_list": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Ech Config List"
          }
        },
        "type": "object",
        "required": ["remark", "priority"],
        "title": "CreateHost"
      },
      "CreateUserFromTemplate": {
        "properties": {
          "user_template_id": {
            "type": "integer",
            "title": "User Template Id"
          },
          "note": {
            "anyOf": [
              { "type": "string", "maxLength": 500 },
              { "type": "null" }
            ],
            "title": "Note"
          },
          "username": { "type": "string", "title": "Username" }
        },
        "type": "object",
        "required": ["user_template_id", "username"],
        "title": "CreateUserFromTemplate"
      },
      "Discord": {
        "properties": {
          "enable": { "type": "boolean", "title": "Enable", "default": false },
          "token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Token"
          },
          "proxy_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Proxy Url"
          }
        },
        "type": "object",
        "title": "Discord"
      },
      "DownloadLink": {
        "properties": {
          "name": { "type": "string", "maxLength": 64, "title": "Name" },
          "url": { "type": "string", "title": "Url" },
          "language": { "$ref": "#/components/schemas/Language" }
        },
        "type": "object",
        "required": ["name", "url", "language"],
        "title": "DownloadLink"
      },
      "ExtraSettings": {
        "properties": {
          "flow": {
            "anyOf": [
              { "$ref": "#/components/schemas/XTLSFlows" },
              { "type": "null" }
            ],
            "default": ""
          },
          "method": {
            "anyOf": [
              { "$ref": "#/components/schemas/ShadowsocksMethods" },
              { "type": "null" }
            ],
            "default": "chacha20-ietf-poly1305"
          }
        },
        "type": "object",
        "title": "ExtraSettings"
      },
      "Forbidden": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "default": "You are not allowed to ..."
          }
        },
        "type": "object",
        "title": "Forbidden"
      },
      "FragmentSettings": {
        "properties": {
          "xray": {
            "anyOf": [
              { "$ref": "#/components/schemas/XrayFragmentSettings" },
              { "type": "null" }
            ]
          },
          "sing_box": {
            "anyOf": [
              { "$ref": "#/components/schemas/SingBoxFragmentSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "FragmentSettings"
      },
      "GRPCSettings": {
        "properties": {
          "multi_mode": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Multi Mode"
          },
          "idle_timeout": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Idle Timeout"
          },
          "health_check_timeout": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Health Check Timeout"
          },
          "permit_without_stream": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Permit Without Stream"
          },
          "initial_windows_size": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Initial Windows Size"
          }
        },
        "type": "object",
        "title": "GRPCSettings"
      },
      "General": {
        "properties": {
          "default_flow": {
            "$ref": "#/components/schemas/XTLSFlows",
            "default": ""
          },
          "default_method": {
            "$ref": "#/components/schemas/ShadowsocksMethods",
            "default": "chacha20-ietf-poly1305"
          }
        },
        "type": "object",
        "title": "General"
      },
      "GroupCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 3,
            "title": "Name"
          },
          "inbound_tags": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Inbound Tags"
          },
          "is_disabled": {
            "type": "boolean",
            "title": "Is Disabled",
            "default": false
          }
        },
        "type": "object",
        "required": ["name", "inbound_tags"],
        "title": "GroupCreate"
      },
      "GroupModify": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 3,
            "title": "Name"
          },
          "inbound_tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Inbound Tags",
            "default": []
          },
          "is_disabled": {
            "type": "boolean",
            "title": "Is Disabled",
            "default": false
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "GroupModify"
      },
      "GroupResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 3,
            "title": "Name"
          },
          "inbound_tags": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Inbound Tags",
            "default": []
          },
          "is_disabled": {
            "type": "boolean",
            "title": "Is Disabled",
            "default": false
          },
          "id": { "type": "integer", "title": "Id" },
          "total_users": {
            "type": "integer",
            "title": "Total Users",
            "default": 0
          }
        },
        "type": "object",
        "required": ["name", "id"],
        "title": "GroupResponse"
      },
      "GroupsResponse": {
        "properties": {
          "groups": {
            "items": { "$ref": "#/components/schemas/GroupResponse" },
            "type": "array",
            "title": "Groups"
          },
          "total": { "type": "integer", "title": "Total" }
        },
        "type": "object",
        "required": ["groups", "total"],
        "title": "GroupsResponse"
      },
      "HTTPException": {
        "properties": { "detail": { "type": "string", "title": "Detail" } },
        "type": "object",
        "required": ["detail"],
        "title": "HTTPException"
      },
      "HTTPRequest": {
        "properties": {
          "version": {
            "type": "string",
            "pattern": "^(1(?:\\.0|\\.1)|2\\.0|3\\.0)$",
            "title": "Version",
            "default": "1.1"
          },
          "headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": { "type": "string" },
                  "type": "array"
                },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Headers"
          },
          "method": {
            "type": "string",
            "pattern": "^(GET|POST|PUT|DELETE|HEAD|OPTIONS|PATCH|TRACE|CONNECT)$",
            "title": "Method",
            "default": "GET"
          }
        },
        "type": "object",
        "title": "HTTPRequest"
      },
      "HTTPResponse": {
        "properties": {
          "version": {
            "type": "string",
            "pattern": "^(1(?:\\.0|\\.1)|2\\.0|3\\.0)$",
            "title": "Version",
            "default": "1.1"
          },
          "headers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": { "type": "string" },
                  "type": "array"
                },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Headers"
          },
          "status": {
            "type": "string",
            "pattern": "^[1-5]\\d{2}$",
            "title": "Status",
            "default": "200"
          },
          "reason": {
            "type": "string",
            "pattern": "^(?i)(?:OK|Created|Accepted|Non-Authoritative Information|No Content|Reset Content|Partial Content|Multiple Choices|Moved Permanently|Found|See Other|Not Modified|Use Proxy|Temporary Redirect|Permanent Redirect|Bad Request|Unauthorized|Payment Required|Forbidden|Not Found|Method Not Allowed|Not Acceptable|Proxy Authentication Required|Request Timeout|Conflict|Gone|Length Required|Precondition Failed|Payload Too Large|URI Too Long|Unsupported Media Type|Range Not Satisfiable|Expectation Failed|I'm a teapot|Misdirected Request|Unprocessable Entity|Locked|Failed Dependency|Too Early|Upgrade Required|Precondition Required|Too Many Requests|Request Header Fields Too Large|Unavailable For Legal Reasons|Internal Server Error|Not Implemented|Bad Gateway|Service Unavailable|Gateway Timeout|HTTP Version Not Supported)$",
            "title": "Reason",
            "default": "OK"
          }
        },
        "type": "object",
        "title": "HTTPResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "KCPSettings": {
        "properties": {
          "header": {
            "type": "string",
            "pattern": "^(:?none|srtp|utp|wechat-video|dtls|wireguard)$",
            "title": "Header",
            "default": "none"
          },
          "mtu": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Mtu"
          },
          "tti": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Tti"
          },
          "uplink_capacity": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Uplink Capacity"
          },
          "downlink_capacity": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Downlink Capacity"
          },
          "congestion": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Congestion"
          },
          "read_buffer_size": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Read Buffer Size"
          },
          "write_buffer_size": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Write Buffer Size"
          }
        },
        "type": "object",
        "title": "KCPSettings"
      },
      "Language": {
        "type": "string",
        "enum": ["fa", "en", "ru", "zh"],
        "title": "Language"
      },
      "ModifyUserByTemplate": {
        "properties": {
          "user_template_id": {
            "type": "integer",
            "title": "User Template Id"
          },
          "note": {
            "anyOf": [
              { "type": "string", "maxLength": 500 },
              { "type": "null" }
            ],
            "title": "Note"
          }
        },
        "type": "object",
        "required": ["user_template_id"],
        "title": "ModifyUserByTemplate"
      },
      "MultiplexProtocol": {
        "type": "string",
        "enum": ["smux", "yamux", "h2mux"],
        "title": "MultiplexProtocol"
      },
      "MuxSettings-Input": {
        "properties": {
          "sing_box": {
            "anyOf": [
              { "$ref": "#/components/schemas/SingBoxMuxSettings" },
              { "type": "null" }
            ]
          },
          "clash": {
            "anyOf": [
              { "$ref": "#/components/schemas/ClashMuxSettings" },
              { "type": "null" }
            ]
          },
          "xray": {
            "anyOf": [
              { "$ref": "#/components/schemas/XrayMuxSettings-Input" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "MuxSettings"
      },
      "MuxSettings-Output": {
        "properties": {
          "sing_box": {
            "anyOf": [
              { "$ref": "#/components/schemas/SingBoxMuxSettings" },
              { "type": "null" }
            ]
          },
          "clash": {
            "anyOf": [
              { "$ref": "#/components/schemas/ClashMuxSettings" },
              { "type": "null" }
            ]
          },
          "xray": {
            "anyOf": [
              { "$ref": "#/components/schemas/XrayMuxSettings-Output" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "MuxSettings"
      },
      "NextPlanModel": {
        "properties": {
          "user_template_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "User Template Id"
          },
          "data_limit": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Data Limit"
          },
          "expire": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Expire"
          },
          "add_remaining_traffic": {
            "type": "boolean",
            "title": "Add Remaining Traffic",
            "default": false
          }
        },
        "type": "object",
        "title": "NextPlanModel"
      },
      "NodeConnectionType": {
        "type": "string",
        "enum": ["grpc", "rest"],
        "title": "NodeConnectionType"
      },
      "NodeCreate": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "address": { "type": "string", "title": "Address" },
          "port": { "type": "integer", "title": "Port", "default": 62050 },
          "usage_coefficient": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Usage Coefficient",
            "default": 1.0
          },
          "connection_type": {
            "$ref": "#/components/schemas/NodeConnectionType"
          },
          "server_ca": { "type": "string", "title": "Server Ca" },
          "keep_alive": { "type": "integer", "title": "Keep Alive" },
          "max_logs": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Max Logs",
            "default": 1000
          },
          "core_config_id": { "type": "integer", "title": "Core Config Id" },
          "api_key": { "type": "string", "title": "Api Key" },
          "gather_logs": {
            "type": "boolean",
            "title": "Gather Logs",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "name",
          "address",
          "connection_type",
          "server_ca",
          "keep_alive",
          "core_config_id",
          "api_key"
        ],
        "title": "NodeCreate",
        "example": {
          "address": "192.168.1.1",
          "api_key": "valid uuid",
          "connection_type": "grpc",
          "core_config_id": 1,
          "gather_logs": true,
          "keep_alive": 60,
          "max_logs": 1000,
          "name": "DE node",
          "port": 62050,
          "server_ca": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----",
          "usage_coefficient": 1
        }
      },
      "NodeModify": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address"
          },
          "port": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Port"
          },
          "usage_coefficient": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Usage Coefficient"
          },
          "connection_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/NodeConnectionType" },
              { "type": "null" }
            ]
          },
          "server_ca": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Server Ca"
          },
          "keep_alive": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Keep Alive"
          },
          "max_logs": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Max Logs"
          },
          "core_config_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Core Config Id"
          },
          "api_key": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Api Key"
          },
          "gather_logs": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Gather Logs"
          },
          "api_port": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Api Port"
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/NodeStatus" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "NodeModify",
        "example": {
          "address": "192.168.1.1",
          "api_key": "valid uuid",
          "connection_type": "grpc",
          "core_config_id": 1,
          "gather_logs": true,
          "keep_alive": 60,
          "max_logs": 1000,
          "name": "DE node",
          "port": 62050,
          "server_ca": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----",
          "status": "disabled",
          "usage_coefficient": 1.0
        }
      },
      "NodeRealtimeStats": {
        "properties": {
          "mem_total": { "type": "integer", "title": "Mem Total" },
          "mem_used": { "type": "integer", "title": "Mem Used" },
          "cpu_cores": { "type": "integer", "title": "Cpu Cores" },
          "cpu_usage": { "type": "number", "title": "Cpu Usage" },
          "incoming_bandwidth_speed": {
            "type": "integer",
            "title": "Incoming Bandwidth Speed"
          },
          "outgoing_bandwidth_speed": {
            "type": "integer",
            "title": "Outgoing Bandwidth Speed"
          }
        },
        "type": "object",
        "required": [
          "mem_total",
          "mem_used",
          "cpu_cores",
          "cpu_usage",
          "incoming_bandwidth_speed",
          "outgoing_bandwidth_speed"
        ],
        "title": "NodeRealtimeStats"
      },
      "NodeResponse": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "address": { "type": "string", "title": "Address" },
          "port": { "type": "integer", "title": "Port", "default": 62050 },
          "usage_coefficient": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Usage Coefficient",
            "default": 1.0
          },
          "connection_type": {
            "$ref": "#/components/schemas/NodeConnectionType"
          },
          "server_ca": { "type": "string", "title": "Server Ca" },
          "keep_alive": { "type": "integer", "title": "Keep Alive" },
          "max_logs": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Max Logs",
            "default": 1000
          },
          "core_config_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Core Config Id"
          },
          "api_key": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Api Key"
          },
          "gather_logs": {
            "type": "boolean",
            "title": "Gather Logs",
            "default": true
          },
          "id": { "type": "integer", "title": "Id" },
          "xray_version": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Xray Version"
          },
          "node_version": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Node Version"
          },
          "status": { "$ref": "#/components/schemas/NodeStatus" },
          "message": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "name",
          "address",
          "connection_type",
          "server_ca",
          "keep_alive",
          "core_config_id",
          "api_key",
          "id",
          "xray_version",
          "node_version",
          "status",
          "message"
        ],
        "title": "NodeResponse"
      },
      "NodeSettings": {
        "properties": {
          "min_node_version": {
            "type": "string",
            "title": "Min Node Version",
            "default": "v1.0.0"
          }
        },
        "type": "object",
        "title": "NodeSettings"
      },
      "NodeStats": {
        "properties": {
          "period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Period Start"
          },
          "mem_usage_percentage": {
            "type": "number",
            "title": "Mem Usage Percentage"
          },
          "cpu_usage_percentage": {
            "type": "number",
            "title": "Cpu Usage Percentage"
          },
          "incoming_bandwidth_speed": {
            "type": "number",
            "title": "Incoming Bandwidth Speed"
          },
          "outgoing_bandwidth_speed": {
            "type": "number",
            "title": "Outgoing Bandwidth Speed"
          }
        },
        "type": "object",
        "required": [
          "period_start",
          "mem_usage_percentage",
          "cpu_usage_percentage",
          "incoming_bandwidth_speed",
          "outgoing_bandwidth_speed"
        ],
        "title": "NodeStats"
      },
      "NodeStatsList": {
        "properties": {
          "period": {
            "anyOf": [
              { "$ref": "#/components/schemas/Period" },
              { "type": "null" }
            ]
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "title": "Start"
          },
          "end": { "type": "string", "format": "date-time", "title": "End" },
          "stats": {
            "items": { "$ref": "#/components/schemas/NodeStats" },
            "type": "array",
            "title": "Stats"
          }
        },
        "type": "object",
        "required": ["start", "end", "stats"],
        "title": "NodeStatsList"
      },
      "NodeStatus": {
        "type": "string",
        "enum": ["connected", "connecting", "error", "disabled"],
        "title": "NodeStatus"
      },
      "NodeUsageStat": {
        "properties": {
          "uplink": { "type": "integer", "title": "Uplink" },
          "downlink": { "type": "integer", "title": "Downlink" },
          "period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Period Start"
          }
        },
        "type": "object",
        "required": ["uplink", "downlink", "period_start"],
        "title": "NodeUsageStat"
      },
      "NodeUsageStatsList": {
        "properties": {
          "period": {
            "anyOf": [
              { "$ref": "#/components/schemas/Period" },
              { "type": "null" }
            ]
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "title": "Start"
          },
          "end": { "type": "string", "format": "date-time", "title": "End" },
          "stats": {
            "additionalProperties": {
              "items": { "$ref": "#/components/schemas/NodeUsageStat" },
              "type": "array"
            },
            "type": "object",
            "title": "Stats"
          }
        },
        "type": "object",
        "required": ["start", "end", "stats"],
        "title": "NodeUsageStatsList"
      },
      "NoiseSettings": {
        "properties": {
          "xray": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/XrayNoiseSettings" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Xray"
          }
        },
        "type": "object",
        "title": "NoiseSettings"
      },
      "NotFound": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "default": "Entity {} not found"
          }
        },
        "type": "object",
        "title": "NotFound"
      },
      "NotificationEnable": {
        "properties": {
          "admin": { "type": "boolean", "title": "Admin", "default": true },
          "core": { "type": "boolean", "title": "Core", "default": true },
          "group": { "type": "boolean", "title": "Group", "default": true },
          "host": { "type": "boolean", "title": "Host", "default": true },
          "login": { "type": "boolean", "title": "Login", "default": true },
          "node": { "type": "boolean", "title": "Node", "default": true },
          "user": { "type": "boolean", "title": "User", "default": true },
          "user_template": {
            "type": "boolean",
            "title": "User Template",
            "default": true
          },
          "days_left": {
            "type": "boolean",
            "title": "Days Left",
            "default": true
          },
          "percentage_reached": {
            "type": "boolean",
            "title": "Percentage Reached",
            "default": true
          }
        },
        "type": "object",
        "title": "NotificationEnable"
      },
      "NotificationSettings": {
        "properties": {
          "notify_telegram": {
            "type": "boolean",
            "title": "Notify Telegram",
            "default": false
          },
          "notify_discord": {
            "type": "boolean",
            "title": "Notify Discord",
            "default": false
          },
          "telegram_api_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Telegram Api Token"
          },
          "telegram_admin_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Telegram Admin Id"
          },
          "telegram_channel_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Telegram Channel Id"
          },
          "telegram_topic_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Telegram Topic Id"
          },
          "discord_webhook_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Discord Webhook Url"
          },
          "proxy_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Proxy Url"
          },
          "max_retries": {
            "type": "integer",
            "exclusiveMinimum": 1.0,
            "title": "Max Retries"
          }
        },
        "type": "object",
        "required": ["max_retries"],
        "title": "NotificationSettings"
      },
      "Period": {
        "type": "string",
        "enum": ["minute", "hour", "day", "month"],
        "title": "Period"
      },
      "Platform": {
        "type": "string",
        "enum": [
          "android",
          "ios",
          "windows",
          "macos",
          "linux",
          "appletv",
          "androidtv"
        ],
        "title": "Platform"
      },
      "ProxyHostALPN": {
        "type": "string",
        "enum": ["http/1.1", "h2", "h3"],
        "title": "ProxyHostALPN"
      },
      "ProxyHostFingerprint": {
        "type": "string",
        "enum": [
          "",
          "chrome",
          "firefox",
          "safari",
          "ios",
          "android",
          "edge",
          "360",
          "qq",
          "random",
          "randomized",
          "randomizednoalpn",
          "unsafe"
        ],
        "title": "ProxyHostFingerprint"
      },
      "ProxyHostSecurity": {
        "type": "string",
        "enum": ["inbound_default", "none", "tls"],
        "title": "ProxyHostSecurity"
      },
      "ProxyTable-Input": {
        "properties": {
          "vmess": { "$ref": "#/components/schemas/VMessSettings" },
          "vless": { "$ref": "#/components/schemas/VlessSettings" },
          "trojan": { "$ref": "#/components/schemas/TrojanSettings" },
          "shadowsocks": { "$ref": "#/components/schemas/ShadowsocksSettings" }
        },
        "type": "object",
        "title": "ProxyTable"
      },
      "ProxyTable-Output": {
        "properties": {
          "vmess": { "$ref": "#/components/schemas/VMessSettings" },
          "vless": { "$ref": "#/components/schemas/VlessSettings" },
          "trojan": { "$ref": "#/components/schemas/TrojanSettings" },
          "shadowsocks": { "$ref": "#/components/schemas/ShadowsocksSettings" }
        },
        "type": "object",
        "title": "ProxyTable"
      },
      "RemoveUsersResponse": {
        "properties": {
          "users": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Users"
          },
          "count": { "type": "integer", "title": "Count" }
        },
        "type": "object",
        "required": ["users", "count"],
        "title": "RemoveUsersResponse"
      },
      "RunMethod": {
        "type": "string",
        "enum": ["webhook", "long-polling"],
        "title": "RunMethod"
      },
      "SettingsSchema-Input": {
        "properties": {
          "telegram": {
            "anyOf": [
              { "$ref": "#/components/schemas/Telegram" },
              { "type": "null" }
            ]
          },
          "discord": {
            "anyOf": [
              { "$ref": "#/components/schemas/Discord" },
              { "type": "null" }
            ]
          },
          "webhook": {
            "anyOf": [
              { "$ref": "#/components/schemas/Webhook" },
              { "type": "null" }
            ]
          },
          "notification_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/NotificationSettings" },
              { "type": "null" }
            ]
          },
          "notification_enable": {
            "anyOf": [
              { "$ref": "#/components/schemas/NotificationEnable" },
              { "type": "null" }
            ]
          },
          "subscription": {
            "anyOf": [
              { "$ref": "#/components/schemas/Subscription-Input" },
              { "type": "null" }
            ]
          },
          "general": {
            "anyOf": [
              { "$ref": "#/components/schemas/General" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "SettingsSchema"
      },
      "SettingsSchema-Output": {
        "properties": {
          "telegram": {
            "anyOf": [
              { "$ref": "#/components/schemas/Telegram" },
              { "type": "null" }
            ]
          },
          "discord": {
            "anyOf": [
              { "$ref": "#/components/schemas/Discord" },
              { "type": "null" }
            ]
          },
          "webhook": {
            "anyOf": [
              { "$ref": "#/components/schemas/Webhook" },
              { "type": "null" }
            ]
          },
          "notification_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/NotificationSettings" },
              { "type": "null" }
            ]
          },
          "notification_enable": {
            "anyOf": [
              { "$ref": "#/components/schemas/NotificationEnable" },
              { "type": "null" }
            ]
          },
          "subscription": {
            "anyOf": [
              { "$ref": "#/components/schemas/Subscription-Output" },
              { "type": "null" }
            ]
          },
          "general": {
            "anyOf": [
              { "$ref": "#/components/schemas/General" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "SettingsSchema"
      },
      "ShadowsocksMethods": {
        "type": "string",
        "enum": [
          "aes-128-gcm",
          "aes-256-gcm",
          "chacha20-ietf-poly1305",
          "xchacha20-poly1305"
        ],
        "title": "ShadowsocksMethods"
      },
      "ShadowsocksSettings": {
        "properties": {
          "password": {
            "type": "string",
            "minLength": 22,
            "title": "Password"
          },
          "method": {
            "$ref": "#/components/schemas/ShadowsocksMethods",
            "default": "chacha20-ietf-poly1305"
          }
        },
        "type": "object",
        "title": "ShadowsocksSettings"
      },
      "SingBoxFragmentSettings": {
        "properties": {
          "fragment": {
            "type": "boolean",
            "title": "Fragment",
            "default": false
          },
          "fragment_fallback_delay": {
            "type": "string",
            "pattern": "^$|^\\d+ms$",
            "title": "Fragment Fallback Delay",
            "default": ""
          },
          "record_fragment": {
            "type": "boolean",
            "title": "Record Fragment",
            "default": false
          }
        },
        "type": "object",
        "title": "SingBoxFragmentSettings"
      },
      "SingBoxMuxSettings": {
        "properties": {
          "enable": { "type": "boolean", "title": "Enable", "default": false },
          "protocol": {
            "$ref": "#/components/schemas/MultiplexProtocol",
            "default": "smux"
          },
          "max_connections": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Max Connections"
          },
          "max_streams": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Max Streams"
          },
          "min_streams": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Min Streams"
          },
          "padding": {
            "type": "boolean",
            "title": "Padding",
            "default": false
          },
          "brutal": {
            "anyOf": [
              { "$ref": "#/components/schemas/Brutal" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "SingBoxMuxSettings"
      },
      "SubFormatEnable": {
        "properties": {
          "links": { "type": "boolean", "title": "Links", "default": true },
          "links_base64": {
            "type": "boolean",
            "title": "Links Base64",
            "default": true
          },
          "xray": { "type": "boolean", "title": "Xray", "default": true },
          "sing_box": {
            "type": "boolean",
            "title": "Sing Box",
            "default": true
          },
          "clash": { "type": "boolean", "title": "Clash", "default": true },
          "clash_meta": {
            "type": "boolean",
            "title": "Clash Meta",
            "default": true
          },
          "outline": { "type": "boolean", "title": "Outline", "default": true }
        },
        "type": "object",
        "title": "SubFormatEnable"
      },
      "SubRule": {
        "properties": {
          "pattern": { "type": "string", "title": "Pattern" },
          "target": { "$ref": "#/components/schemas/ConfigFormat" }
        },
        "type": "object",
        "required": ["pattern", "target"],
        "title": "SubRule"
      },
      "Subscription-Input": {
        "properties": {
          "url_prefix": {
            "type": "string",
            "title": "Url Prefix",
            "default": ""
          },
          "update_interval": {
            "type": "integer",
            "title": "Update Interval",
            "default": 12
          },
          "support_url": {
            "type": "string",
            "title": "Support Url",
            "default": "https://t.me/"
          },
          "profile_title": {
            "type": "string",
            "title": "Profile Title",
            "default": "Subscription"
          },
          "host_status_filter": {
            "type": "boolean",
            "title": "Host Status Filter"
          },
          "rules": {
            "items": { "$ref": "#/components/schemas/SubRule" },
            "type": "array",
            "title": "Rules"
          },
          "manual_sub_request": {
            "$ref": "#/components/schemas/SubFormatEnable"
          },
          "applications": {
            "items": { "$ref": "#/components/schemas/Application-Input" },
            "type": "array",
            "title": "Applications"
          }
        },
        "type": "object",
        "required": ["host_status_filter", "rules"],
        "title": "Subscription"
      },
      "Subscription-Output": {
        "properties": {
          "url_prefix": {
            "type": "string",
            "title": "Url Prefix",
            "default": ""
          },
          "update_interval": {
            "type": "integer",
            "title": "Update Interval",
            "default": 12
          },
          "support_url": {
            "type": "string",
            "title": "Support Url",
            "default": "https://t.me/"
          },
          "profile_title": {
            "type": "string",
            "title": "Profile Title",
            "default": "Subscription"
          },
          "host_status_filter": {
            "type": "boolean",
            "title": "Host Status Filter"
          },
          "rules": {
            "items": { "$ref": "#/components/schemas/SubRule" },
            "type": "array",
            "title": "Rules"
          },
          "manual_sub_request": {
            "$ref": "#/components/schemas/SubFormatEnable"
          },
          "applications": {
            "items": { "$ref": "#/components/schemas/Application-Output" },
            "type": "array",
            "title": "Applications"
          }
        },
        "type": "object",
        "required": ["host_status_filter", "rules"],
        "title": "Subscription"
      },
      "SubscriptionUserResponse": {
        "properties": {
          "proxy_settings": {
            "$ref": "#/components/schemas/ProxyTable-Output"
          },
          "expire": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Expire"
          },
          "data_limit": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Data Limit",
            "description": "data_limit can be 0 or greater"
          },
          "data_limit_reset_strategy": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserDataLimitResetStrategy" },
              { "type": "null" }
            ]
          },
          "on_hold_expire_duration": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "On Hold Expire Duration"
          },
          "on_hold_timeout": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "On Hold Timeout"
          },
          "group_ids": {
            "anyOf": [
              { "items": { "type": "integer" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Group Ids"
          },
          "next_plan": {
            "anyOf": [
              { "$ref": "#/components/schemas/NextPlanModel" },
              { "type": "null" }
            ]
          },
          "id": { "type": "integer", "title": "Id" },
          "username": { "type": "string", "title": "Username" },
          "status": { "$ref": "#/components/schemas/UserStatus" },
          "used_traffic": { "type": "integer", "title": "Used Traffic" },
          "lifetime_used_traffic": {
            "type": "integer",
            "title": "Lifetime Used Traffic",
            "default": 0
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "edit_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Edit At"
          },
          "online_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Online At"
          }
        },
        "type": "object",
        "required": ["id", "username", "status", "used_traffic", "created_at"],
        "title": "SubscriptionUserResponse"
      },
      "SystemStats": {
        "properties": {
          "version": { "type": "string", "title": "Version" },
          "mem_total": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Mem Total"
          },
          "mem_used": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Mem Used"
          },
          "cpu_cores": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Cpu Cores"
          },
          "cpu_usage": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Cpu Usage"
          },
          "total_user": { "type": "integer", "title": "Total User" },
          "online_users": { "type": "integer", "title": "Online Users" },
          "active_users": { "type": "integer", "title": "Active Users" },
          "on_hold_users": { "type": "integer", "title": "On Hold Users" },
          "disabled_users": { "type": "integer", "title": "Disabled Users" },
          "expired_users": { "type": "integer", "title": "Expired Users" },
          "limited_users": { "type": "integer", "title": "Limited Users" },
          "incoming_bandwidth": {
            "type": "integer",
            "title": "Incoming Bandwidth"
          },
          "outgoing_bandwidth": {
            "type": "integer",
            "title": "Outgoing Bandwidth"
          }
        },
        "type": "object",
        "required": [
          "version",
          "total_user",
          "online_users",
          "active_users",
          "on_hold_users",
          "disabled_users",
          "expired_users",
          "limited_users",
          "incoming_bandwidth",
          "outgoing_bandwidth"
        ],
        "title": "SystemStats"
      },
      "TcpSettings": {
        "properties": {
          "header": {
            "type": "string",
            "pattern": "^(:?none|http)$",
            "title": "Header",
            "default": "none"
          },
          "request": {
            "anyOf": [
              { "$ref": "#/components/schemas/HTTPRequest" },
              { "type": "null" }
            ]
          },
          "response": {
            "anyOf": [
              { "$ref": "#/components/schemas/HTTPResponse" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "TcpSettings"
      },
      "Telegram": {
        "properties": {
          "enable": { "type": "boolean", "title": "Enable", "default": false },
          "token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Token"
          },
          "webhook_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Webhook Url"
          },
          "webhook_secret": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Webhook Secret"
          },
          "proxy_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Proxy Url"
          },
          "method": {
            "$ref": "#/components/schemas/RunMethod",
            "default": "webhook"
          },
          "mini_app_login": {
            "type": "boolean",
            "title": "Mini App Login",
            "default": true
          },
          "mini_app_web_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Mini App Web Url",
            "default": ""
          },
          "for_admins_only": {
            "type": "boolean",
            "title": "For Admins Only",
            "default": true
          }
        },
        "type": "object",
        "title": "Telegram"
      },
      "Token": {
        "properties": {
          "access_token": { "type": "string", "title": "Access Token" },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          }
        },
        "type": "object",
        "required": ["access_token"],
        "title": "Token"
      },
      "TransportSettings-Input": {
        "properties": {
          "xhttp_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/XHttpSettings-Input" },
              { "type": "null" }
            ]
          },
          "grpc_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/GRPCSettings" },
              { "type": "null" }
            ]
          },
          "kcp_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/KCPSettings" },
              { "type": "null" }
            ]
          },
          "tcp_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/TcpSettings" },
              { "type": "null" }
            ]
          },
          "websocket_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/WebSocketSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "TransportSettings"
      },
      "TransportSettings-Output": {
        "properties": {
          "xhttp_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/XHttpSettings-Output" },
              { "type": "null" }
            ]
          },
          "grpc_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/GRPCSettings" },
              { "type": "null" }
            ]
          },
          "kcp_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/KCPSettings" },
              { "type": "null" }
            ]
          },
          "tcp_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/TcpSettings" },
              { "type": "null" }
            ]
          },
          "websocket_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/WebSocketSettings" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "TransportSettings"
      },
      "TrojanSettings": {
        "properties": { "password": { "type": "string", "title": "Password" } },
        "type": "object",
        "title": "TrojanSettings"
      },
      "Unauthorized": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "default": "Not authenticated"
          }
        },
        "type": "object",
        "title": "Unauthorized"
      },
      "UsageTable": {
        "type": "string",
        "enum": ["node_user_usages", "node_usages"],
        "title": "UsageTable"
      },
      "UserCreate": {
        "properties": {
          "proxy_settings": { "$ref": "#/components/schemas/ProxyTable-Input" },
          "expire": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Expire"
          },
          "data_limit": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Data Limit",
            "description": "data_limit can be 0 or greater"
          },
          "data_limit_reset_strategy": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserDataLimitResetStrategy" },
              { "type": "null" }
            ]
          },
          "note": {
            "anyOf": [
              { "type": "string", "maxLength": 500 },
              { "type": "null" }
            ],
            "title": "Note"
          },
          "on_hold_expire_duration": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "On Hold Expire Duration"
          },
          "on_hold_timeout": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "On Hold Timeout"
          },
          "group_ids": {
            "anyOf": [
              { "items": { "type": "integer" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Group Ids"
          },
          "auto_delete_in_days": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Auto Delete In Days"
          },
          "next_plan": {
            "anyOf": [
              { "$ref": "#/components/schemas/NextPlanModel" },
              { "type": "null" }
            ]
          },
          "username": { "type": "string", "title": "Username" },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserStatusCreate" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["username"],
        "title": "UserCreate"
      },
      "UserDataLimitResetStrategy": {
        "type": "string",
        "enum": ["no_reset", "day", "week", "month", "year"],
        "title": "UserDataLimitResetStrategy"
      },
      "UserModify": {
        "properties": {
          "proxy_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/ProxyTable-Input" },
              { "type": "null" }
            ]
          },
          "expire": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Expire"
          },
          "data_limit": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Data Limit",
            "description": "data_limit can be 0 or greater"
          },
          "data_limit_reset_strategy": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserDataLimitResetStrategy" },
              { "type": "null" }
            ]
          },
          "note": {
            "anyOf": [
              { "type": "string", "maxLength": 500 },
              { "type": "null" }
            ],
            "title": "Note"
          },
          "on_hold_expire_duration": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "On Hold Expire Duration"
          },
          "on_hold_timeout": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "On Hold Timeout"
          },
          "group_ids": {
            "anyOf": [
              { "items": { "type": "integer" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Group Ids"
          },
          "auto_delete_in_days": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Auto Delete In Days"
          },
          "next_plan": {
            "anyOf": [
              { "$ref": "#/components/schemas/NextPlanModel" },
              { "type": "null" }
            ]
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserStatusModify" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "UserModify"
      },
      "UserResponse": {
        "properties": {
          "proxy_settings": {
            "$ref": "#/components/schemas/ProxyTable-Output"
          },
          "expire": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Expire"
          },
          "data_limit": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Data Limit",
            "description": "data_limit can be 0 or greater"
          },
          "data_limit_reset_strategy": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserDataLimitResetStrategy" },
              { "type": "null" }
            ]
          },
          "note": {
            "anyOf": [
              { "type": "string", "maxLength": 500 },
              { "type": "null" }
            ],
            "title": "Note"
          },
          "on_hold_expire_duration": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "On Hold Expire Duration"
          },
          "on_hold_timeout": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "On Hold Timeout"
          },
          "group_ids": {
            "anyOf": [
              { "items": { "type": "integer" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Group Ids"
          },
          "auto_delete_in_days": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Auto Delete In Days"
          },
          "next_plan": {
            "anyOf": [
              { "$ref": "#/components/schemas/NextPlanModel" },
              { "type": "null" }
            ]
          },
          "id": { "type": "integer", "title": "Id" },
          "username": { "type": "string", "title": "Username" },
          "status": { "$ref": "#/components/schemas/UserStatus" },
          "used_traffic": { "type": "integer", "title": "Used Traffic" },
          "lifetime_used_traffic": {
            "type": "integer",
            "title": "Lifetime Used Traffic",
            "default": 0
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "edit_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Edit At"
          },
          "online_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Online At"
          },
          "subscription_url": {
            "type": "string",
            "title": "Subscription Url",
            "default": ""
          },
          "admin": {
            "anyOf": [
              { "$ref": "#/components/schemas/AdminBase" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["id", "username", "status", "used_traffic", "created_at"],
        "title": "UserResponse"
      },
      "UserStatus": {
        "type": "string",
        "enum": ["active", "disabled", "limited", "expired", "on_hold"],
        "title": "UserStatus"
      },
      "UserStatusCreate": {
        "type": "string",
        "enum": ["active", "on_hold"],
        "title": "UserStatusCreate"
      },
      "UserStatusModify": {
        "type": "string",
        "enum": ["active", "disabled", "on_hold"],
        "title": "UserStatusModify"
      },
      "UserSubscriptionUpdateChart": {
        "properties": {
          "total": { "type": "integer", "title": "Total" },
          "segments": {
            "items": {
              "$ref": "#/components/schemas/UserSubscriptionUpdateChartSegment"
            },
            "type": "array",
            "title": "Segments"
          }
        },
        "type": "object",
        "required": ["total"],
        "title": "UserSubscriptionUpdateChart"
      },
      "UserSubscriptionUpdateChartSegment": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "count": { "type": "integer", "title": "Count" },
          "percentage": { "type": "number", "title": "Percentage" }
        },
        "type": "object",
        "required": ["name", "count", "percentage"],
        "title": "UserSubscriptionUpdateChartSegment"
      },
      "UserSubscriptionUpdateList": {
        "properties": {
          "updates": {
            "items": {
              "$ref": "#/components/schemas/UserSubscriptionUpdateSchema"
            },
            "type": "array",
            "title": "Updates"
          },
          "count": { "type": "integer", "title": "Count" }
        },
        "type": "object",
        "required": ["count"],
        "title": "UserSubscriptionUpdateList"
      },
      "UserSubscriptionUpdateSchema": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "user_agent": { "type": "string", "title": "User Agent" }
        },
        "type": "object",
        "required": ["created_at", "user_agent"],
        "title": "UserSubscriptionUpdateSchema"
      },
      "UserTemplateCreate": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "data_limit": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Data Limit",
            "description": "data_limit can be 0 or greater"
          },
          "expire_duration": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Expire Duration",
            "description": "expire_duration can be 0 or greater in seconds"
          },
          "username_prefix": {
            "anyOf": [
              { "type": "string", "maxLength": 20 },
              { "type": "null" }
            ],
            "title": "Username Prefix"
          },
          "username_suffix": {
            "anyOf": [
              { "type": "string", "maxLength": 20 },
              { "type": "null" }
            ],
            "title": "Username Suffix"
          },
          "group_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Group Ids"
          },
          "extra_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/ExtraSettings" },
              { "type": "null" }
            ]
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserStatusCreate" },
              { "type": "null" }
            ]
          },
          "reset_usages": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Reset Usages"
          },
          "on_hold_timeout": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "On Hold Timeout"
          },
          "data_limit_reset_strategy": {
            "$ref": "#/components/schemas/UserDataLimitResetStrategy",
            "default": "no_reset"
          },
          "is_disabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Disabled"
          }
        },
        "type": "object",
        "required": ["group_ids"],
        "title": "UserTemplateCreate"
      },
      "UserTemplateModify": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "data_limit": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Data Limit",
            "description": "data_limit can be 0 or greater"
          },
          "expire_duration": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Expire Duration",
            "description": "expire_duration can be 0 or greater in seconds"
          },
          "username_prefix": {
            "anyOf": [
              { "type": "string", "maxLength": 20 },
              { "type": "null" }
            ],
            "title": "Username Prefix"
          },
          "username_suffix": {
            "anyOf": [
              { "type": "string", "maxLength": 20 },
              { "type": "null" }
            ],
            "title": "Username Suffix"
          },
          "group_ids": {
            "anyOf": [
              { "items": { "type": "integer" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Group Ids"
          },
          "extra_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/ExtraSettings" },
              { "type": "null" }
            ]
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserStatusCreate" },
              { "type": "null" }
            ]
          },
          "reset_usages": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Reset Usages"
          },
          "on_hold_timeout": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "On Hold Timeout"
          },
          "data_limit_reset_strategy": {
            "$ref": "#/components/schemas/UserDataLimitResetStrategy",
            "default": "no_reset"
          },
          "is_disabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Disabled"
          }
        },
        "type": "object",
        "title": "UserTemplateModify"
      },
      "UserTemplateResponse": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "data_limit": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Data Limit",
            "description": "data_limit can be 0 or greater"
          },
          "expire_duration": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Expire Duration",
            "description": "expire_duration can be 0 or greater in seconds"
          },
          "username_prefix": {
            "anyOf": [
              { "type": "string", "maxLength": 20 },
              { "type": "null" }
            ],
            "title": "Username Prefix"
          },
          "username_suffix": {
            "anyOf": [
              { "type": "string", "maxLength": 20 },
              { "type": "null" }
            ],
            "title": "Username Suffix"
          },
          "group_ids": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Group Ids"
          },
          "extra_settings": {
            "anyOf": [
              { "$ref": "#/components/schemas/ExtraSettings" },
              { "type": "null" }
            ]
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserStatusCreate" },
              { "type": "null" }
            ]
          },
          "reset_usages": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Reset Usages"
          },
          "on_hold_timeout": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "On Hold Timeout"
          },
          "data_limit_reset_strategy": {
            "$ref": "#/components/schemas/UserDataLimitResetStrategy",
            "default": "no_reset"
          },
          "is_disabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Disabled"
          },
          "id": { "type": "integer", "title": "Id" }
        },
        "type": "object",
        "required": ["group_ids", "id"],
        "title": "UserTemplateResponse"
      },
      "UserUsageStat": {
        "properties": {
          "total_traffic": { "type": "integer", "title": "Total Traffic" },
          "period_start": {
            "type": "string",
            "format": "date-time",
            "title": "Period Start"
          }
        },
        "type": "object",
        "required": ["total_traffic", "period_start"],
        "title": "UserUsageStat"
      },
      "UserUsageStatsList": {
        "properties": {
          "period": {
            "anyOf": [
              { "$ref": "#/components/schemas/Period" },
              { "type": "null" }
            ]
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "title": "Start"
          },
          "end": { "type": "string", "format": "date-time", "title": "End" },
          "stats": {
            "additionalProperties": {
              "items": { "$ref": "#/components/schemas/UserUsageStat" },
              "type": "array"
            },
            "type": "object",
            "title": "Stats"
          }
        },
        "type": "object",
        "required": ["start", "end", "stats"],
        "title": "UserUsageStatsList"
      },
      "UsersResponse": {
        "properties": {
          "users": {
            "items": { "$ref": "#/components/schemas/UserResponse" },
            "type": "array",
            "title": "Users"
          },
          "total": { "type": "integer", "title": "Total" }
        },
        "type": "object",
        "required": ["users", "total"],
        "title": "UsersResponse"
      },
      "VMessSettings": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" }
        },
        "type": "object",
        "title": "VMessSettings"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "VlessSettings": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "flow": { "$ref": "#/components/schemas/XTLSFlows", "default": "" }
        },
        "type": "object",
        "title": "VlessSettings"
      },
      "WebSocketSettings": {
        "properties": {
          "heartbeatPeriod": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Heartbeatperiod"
          }
        },
        "type": "object",
        "title": "WebSocketSettings"
      },
      "Webhook": {
        "properties": {
          "enable": { "type": "boolean", "title": "Enable", "default": false },
          "webhooks": {
            "items": { "$ref": "#/components/schemas/WebhookInfo" },
            "type": "array",
            "title": "Webhooks",
            "default": []
          },
          "days_left": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Days Left",
            "default": []
          },
          "usage_percent": {
            "items": { "type": "integer" },
            "type": "array",
            "title": "Usage Percent",
            "default": []
          },
          "timeout": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Timeout"
          },
          "recurrent": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Recurrent"
          },
          "proxy_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Proxy Url"
          }
        },
        "type": "object",
        "required": ["timeout", "recurrent"],
        "title": "Webhook"
      },
      "WebhookInfo": {
        "properties": {
          "url": { "type": "string", "title": "Url" },
          "secret": { "type": "string", "title": "Secret" }
        },
        "type": "object",
        "required": ["url", "secret"],
        "title": "WebhookInfo"
      },
      "XHttpModes": {
        "type": "string",
        "enum": ["auto", "packet-up", "stream-up", "stream-one"],
        "title": "XHttpModes"
      },
      "XHttpSettings-Input": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/XHttpModes",
            "default": "auto"
          },
          "no_grpc_header": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "No Grpc Header"
          },
          "x_padding_bytes": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "X Padding Bytes"
          },
          "sc_max_each_post_bytes": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Sc Max Each Post Bytes"
          },
          "sc_min_posts_interval_ms": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Sc Min Posts Interval Ms"
          },
          "xmux": {
            "anyOf": [
              { "$ref": "#/components/schemas/XMuxSettings-Input" },
              { "type": "null" }
            ]
          },
          "download_settings": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Download Settings"
          }
        },
        "type": "object",
        "title": "XHttpSettings"
      },
      "XHttpSettings-Output": {
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/XHttpModes",
            "default": "auto"
          },
          "no_grpc_header": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "No Grpc Header"
          },
          "x_padding_bytes": {
            "anyOf": [
              { "type": "string", "pattern": "^\\d{1,16}(-\\d{1,16})?$" },
              { "type": "null" }
            ],
            "title": "X Padding Bytes"
          },
          "sc_max_each_post_bytes": {
            "anyOf": [
              { "type": "string", "pattern": "^\\d{1,16}(-\\d{1,16})?$" },
              { "type": "null" }
            ],
            "title": "Sc Max Each Post Bytes"
          },
          "sc_min_posts_interval_ms": {
            "anyOf": [
              { "type": "string", "pattern": "^\\d{1,16}(-\\d{1,16})?$" },
              { "type": "null" }
            ],
            "title": "Sc Min Posts Interval Ms"
          },
          "xmux": {
            "anyOf": [
              { "$ref": "#/components/schemas/XMuxSettings-Output" },
              { "type": "null" }
            ]
          },
          "download_settings": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Download Settings"
          }
        },
        "type": "object",
        "title": "XHttpSettings"
      },
      "XMuxSettings-Input": {
        "properties": {
          "max_concurrency": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Max Concurrency"
          },
          "max_connections": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "Max Connections"
          },
          "c_max_reuse_times": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "C Max Reuse Times"
          },
          "c_max_lifetime": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "C Max Lifetime"
          },
          "h_max_request_times": {
            "anyOf": [
              { "type": "string" },
              { "type": "integer" },
              { "type": "null" }
            ],
            "title": "H Max Request Times"
          },
          "h_keep_alive_period": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "H Keep Alive Period"
          }
        },
        "type": "object",
        "title": "XMuxSettings"
      },
      "XMuxSettings-Output": {
        "properties": {
          "maxConcurrency": {
            "anyOf": [
              { "type": "string", "pattern": "^\\d{1,16}(-\\d{1,16})?$" },
              { "type": "null" }
            ],
            "title": "Maxconcurrency"
          },
          "maxConnections": {
            "anyOf": [
              { "type": "string", "pattern": "^\\d{1,16}(-\\d{1,16})?$" },
              { "type": "null" }
            ],
            "title": "Maxconnections"
          },
          "cMaxReuseTimes": {
            "anyOf": [
              { "type": "string", "pattern": "^\\d{1,16}(-\\d{1,16})?$" },
              { "type": "null" }
            ],
            "title": "Cmaxreusetimes"
          },
          "cMaxLifetime": {
            "anyOf": [
              { "type": "string", "pattern": "^\\d{1,16}(-\\d{1,16})?$" },
              { "type": "null" }
            ],
            "title": "Cmaxlifetime"
          },
          "hMaxRequestTimes": {
            "anyOf": [
              { "type": "string", "pattern": "^\\d{1,16}(-\\d{1,16})?$" },
              { "type": "null" }
            ],
            "title": "Hmaxrequesttimes"
          },
          "hKeepAlivePeriod": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Hkeepaliveperiod"
          }
        },
        "type": "object",
        "title": "XMuxSettings"
      },
      "XTLSFlows": {
        "type": "string",
        "enum": ["", "xtls-rprx-vision"],
        "title": "XTLSFlows"
      },
      "XUDP": {
        "type": "string",
        "enum": ["reject", "allow", "skip"],
        "title": "XUDP"
      },
      "XrayFragmentSettings": {
        "properties": {
          "packets": {
            "type": "string",
            "pattern": "^(:?tlshello|[\\d-]{1,16})$",
            "title": "Packets"
          },
          "length": {
            "type": "string",
            "pattern": "^[\\d-]{1,16}$",
            "title": "Length"
          },
          "interval": {
            "type": "string",
            "pattern": "^[\\d-]{1,16}$",
            "title": "Interval"
          }
        },
        "type": "object",
        "required": ["packets", "length", "interval"],
        "title": "XrayFragmentSettings"
      },
      "XrayMuxSettings-Input": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": false
          },
          "concurrency": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Concurrency"
          },
          "xudp_concurrency": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Xudp Concurrency"
          },
          "xudp_proxy_udp_443": {
            "$ref": "#/components/schemas/XUDP",
            "default": "reject"
          }
        },
        "type": "object",
        "title": "XrayMuxSettings"
      },
      "XrayMuxSettings-Output": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": false
          },
          "concurrency": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Concurrency"
          },
          "xudpConcurrency": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Xudpconcurrency"
          },
          "xudpProxyUDP443": {
            "$ref": "#/components/schemas/XUDP",
            "default": "reject"
          }
        },
        "type": "object",
        "title": "XrayMuxSettings"
      },
      "XrayNoiseSettings": {
        "properties": {
          "type": {
            "type": "string",
            "pattern": "^(:?rand|str|base64|hex)$",
            "title": "Type"
          },
          "packet": { "type": "string", "title": "Packet" },
          "delay": {
            "type": "string",
            "pattern": "^\\d{1,16}(-\\d{1,16})?$",
            "title": "Delay"
          },
          "apply_to": {
            "type": "string",
            "pattern": "ip|ipv4|ipv6",
            "title": "Apply To",
            "default": "ip"
          }
        },
        "type": "object",
        "required": ["type", "packet", "delay"],
        "title": "XrayNoiseSettings"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": { "scopes": {}, "tokenUrl": "/api/admin/token" }
        }
      }
    }
  }
}
